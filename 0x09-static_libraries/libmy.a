!<arch>
0-isupper.c/    0           0     0     644     239       `
#include "main.h"
/**
 * _isupper - a program that checks for uppercase character
 * @lett: the chracter to be checked
 * Return: 1 if c is uppercase, 0 if not
 */

int _isupper(int lett)
{
	if (lett >= 'A' && lett <= 'Z')
		return (1);
}

0-memset.c/     0           0     0     644     362       `
#include "main.h"

/**
 * _memset - a program that fills a memory with a value
 * @s: input pointer to memory to be filled
 * @b: input variable of char type desired
 * @n: number of bytes
 * Return: A pointer to the filled memory @s
 */

char *_memset(char *s, char b, unsigned int n)

{
	int x = 0;

	for (; n > 0; x++)
	{
		s[x] = b;
		n--;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     375       `
#include "main.h"
/**
 * _strcat - a function that concatenates two strings
 * @dest: pointer to destnation
 * @src: pointer to source
 * Return: Always (void)
 */

char *_strcat(char *dest, char *src)
{
	int x;
	int y;

	x = 0;
	while (dest[x] != '\0')
	{
		x++;
	}
	y = 0;
	while (src[y] != '\0')
	{
		dest[x] = src[y];
		x++;
		y++;
	}

	dest[x] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     389       `
#include "main.h"
/**
 * _atoi - a program that converts a string to an integer
 * @s: string parameter
 * Return: converted integer from string
 */

int _atoi(char *s)
{
	unsigned int dig = 0;
	int sign = 1;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			dig = (dig * 10) + (*s - '0');
		else if (dig > 0)
			break;
	} while (*s++);

	return (dig * sign);
}

1-isdigit.c/    0           0     0     644     223       `
#include "main.h"

/**
 * _isdigit - a program that checks for a digit (0 through 9)
 * @dig: int to be checked
 * Return: 1 if num is a digit, if not 0
 */

int _isdigit(int dig)

{

	return (dig >= '0' && dig <= '9');

}

1-memcpy.c/     0           0     0     644     327       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where to copy to
 *@src: what to copy
 *@n: number of bytes of @src
 *Return: Always 0
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int x = 0;
	int a = n;

	for (; x < a; x++)
	{
		dest[x] = src[x];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     471       `
#include "main.h"
/**
 * _strncat - a function that concatenates two strings
 * using most number of bytes from @src
 * @dest: pointer to destination input
 * @src: pointer to source input
 * @n: most number of bytes from @src
 * Return: @dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int a, b;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
	}

	b = 0;
	while (b < n && src[b] != '\0')
	{
		dest[a] = src[b];
		a++;
		b++;
	}
	dest[a] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     358       `
#include "main.h"
/**
 * _strchr - a function that locates a character in a string
 * @s: pointer to our string array input
 * @c: character to locate from
 * Return: the first occurence of charatcer
 * or null if not found
 */

char *_strchr(char *s, char c)
{
	int a = 0;

	for (; s[a] >= '\0'; a++)
	{
		if (s[a] == c)
		return (&s[a]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     233       `
#include "main.h"
/**
 * _strlen - a function that returns the length of a string
 * @s: string parameter
 * Return: Always 0
 */

int _strlen(char *s)
{
	int lgth = 0;

	while (*s != '\0')
	{
		lgth++;
		s++;
	}

	return (lgth);
}


2-strncpy.c/    0           0     0     644     380       `
#include "main.h"
/**
 * _strncpy - A function that copies a string
 * @dest: pointer to destination input
 * @src: pointer to source
 * @n: number of bytes of @src
 * Return: @dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int z;

	z = 0;
	while (z < n && src[z] != '\0')
	{
		dest[z] = src[z];
		z++;
	}
	while (z < n)
	{
		dest[z] = '\0';
		z++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     218       `
#include "main.h"
/**
 * _islower - a function that checks for lowercase character
 * @c: single letter to check
 * Return: 1 if int c is lowercase, 0 if not
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     252       `
#include "main.h"
/**
 * _puts - a function that prints a string
 * followed by a newline to stdout
 * @str: string to print
 * Return: Always 0
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str + 0);
		++str;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     424       `
#include "main.h"
/**
 * _strcmp - a function that compares two strings
 * @s1: string 1 input
 * @s2: string 2 input
 * Return: Always 0 if @s1 and @s2 are equal
 * negative if @s1 is less than @s2
 * positive integer if @s1 is greater than @s2
 */

int _strcmp(char *s1, char *s2)
{
	int a;

	a = 0;
	while (s1[a] != '\0' && s2[a] != '\0')
	{
		if (s1[a] != s2[a])
	{
		return (s1[a] - s2[a]);
	}
		a++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     453       `
#include "main.h"
/**
 * _strspn - a function that gets the
 * length of a prexif substring
 * @s: pointer to string input
 * @accept: substring prefix to look for
 * Return: Always 0
 */

unsigned int _strspn(char *s, char *accept)
{
	int a, y, f;

	a = 0;
	while (s[a] != '\0')
	{
		y = 0;
		f = 1;
		while (accept[y] != '\0')
		{
			if (s[a] == accept[y])
			{
				f = 0;
				break;
			}
			y++;
		}
		if (f == 1)
			break;
		a++;
	}

	return (a);
}

4-isalpha.c/    0           0     0     644     264       `
#include "main.h"
/**
* _isalpha - a function that checks for alphabetic character
* @c: single letter input
* Return: 1 if c is a letter (lower or uppercase)
* 0 if otherwise
*/

int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     361       `
#include "main.h"

/**
* _strpbrk - a function that finds first
* matching char in string
* @s: string to search matching char from
* @accept: characters that could match
* Return: Always 0
*/

char *_strpbrk(char *s, char *accept)
{
	int k;

	while (*s)
	{
		for (k = 0; accept[k]; k++)
	{
		if (*s == accept[k])
		return (s);
	}
		s++;
	}

	return ('\0');
}


5-strstr.c/     0           0     0     644     420       `
#include "main.h"
/**
 * _strstr - a function that locates a substring
 * @haystack: string to search from
 * @needle: subtring to search for
 * Return: Always 0
 */

char *_strstr(char *haystack, char *needle)
{
	char *p, *n;

	while (*haystack != '\0')
	{
		p = haystack;
		n = needle;
		while (*n != '\0' && *haystack == *n)
		{
			haystack++;
			n++;
		}
		if (!*n)
			return (p);
		haystack++;
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     213       `
#include "main.h"
/**
 * _abs - a function that computes the absolute value of an integer
 * @n: the integer
 * Return: absolute value of @n
 */

int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}

9-strcpy.c/     0           0     0     644     374       `
#include "main.h"
/**
 * _strcpy - a function that copies the string pointed to src
 * @src: source to copy from
 * @dest: destination to copy to
 * Return: the sring value of @dest
 */
char *_strcpy(char *dest, char *src)

{

	int a, lgth;



	for (lgth = 0; src[lgth] != '\0'; lgth++)

	{

	}

	for (a = 0; a <= lgth; a++)

	{

		dest[a] = src[a];

	}

	return (dest);

}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

